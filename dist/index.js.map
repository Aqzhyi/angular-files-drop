{"version":3,"sources":["index.js"],"names":["global","factory","define","amd","exports","require","mod","angular","index","this","_angular","_interopRequireDefault","obj","__esModule","default","directive","$q","$parse","link","$scope","$element","$attrs","fileDrop","event","stopPropagation","preventDefault","dt","dataTransfer","files","filesDrop","$files","$event","fileDragleave","promises","filesRead","reduce","call","prev","file","promise","readAsDataURL","then","dataURL","push","all","fileDragover","addClass","removeClass","bind","addEventListener","$on","removeEventListener","restrict","scope","done","reject","File","Blob","reader","FileReader","onloadend","loadEvent","target","result","Error","_angular2","app","module"],"mappings":"CAAA,SAAWA,EAAQC,GACjB,GAAsB,kBAAXC,SAAyBA,OAAOC,IACzCD,QAAQ,WAAYD,OACf,IAAuB,mBAAZG,SAChBH,EAAQI,QAAQ,gBACX,CACL,GAAIC,IACFF,WAEFH,GAAQD,EAAOO,SACfP,EAAOQ,MAAQF,EAAIF,UAEpBK,KAAM,SAAUC,GACjB,YAIA,SAASC,GAAuBC,GAC9B,MAAOA,IAAOA,EAAIC,WAAaD,GAC7BE,UAASF,GATf,QAASG,GAAUC,EAAIC,GAOrB,QAASC,GAAKC,EAAQC,EAAUC,GAe9B,QAASC,GAASC,GAChBA,EAAMC,kBACND,EAAME,gBAEN,IAAIC,GAAKH,EAAMI,aACXC,EAAQF,GAAMA,EAAGE,OAAS,IAE9B,KAAKA,EAQH,MAPAX,GAAOI,EAAOQ,WAAWV,GACvBW,UACAC,OAAQR,QAGVS,GAAcT,EAKhB,IAAIU,KACkB,UAAlBZ,EAAOa,YACTD,EAASA,EAASE,OAAOC,KAAKR,EAAO,SAACS,EAAMC,GAC1C,GAAIC,GAAUC,EAAcF,GAAMG,KAAK,SAACC,GAAD,MAAaJ,GAAKI,QAAUA,GAEnE,OADAL,GAAKM,KAAKJ,GACHF,QAGXrB,EAAG4B,IAAIX,GAAUQ,KAAK,WAEpBxB,EAAOI,EAAOQ,WAAWV,GACvBW,OAAQF,EACRG,OAAQR,IAGVS,EAAcT,KAIlB,QAASsB,GAAatB,GACpBA,EAAMC,kBACND,EAAME,iBACNL,EAAS0B,SAAS,uBAGpB,QAASd,KACPZ,EAAS2B,YAAY,uBAzDD,SAAlB1B,EAAOa,YAAoBM,EAAgBA,EAAcQ,MAAMhC,GAAAA,KAEnEI,EAAS0B,SAAS,aAClB1B,EAAS,GAAG6B,iBAAiB,YAAajB,GAC1CZ,EAAS,GAAG6B,iBAAiB,WAAYJ,GACzCzB,EAAS,GAAG6B,iBAAiB,OAAQ3B,GAErCH,EAAO+B,IAAI,WAAY,WACrB9B,EAAS,GAAG+B,oBAAoB,YAAanB,GAC7CZ,EAAS,GAAG+B,oBAAoB,WAAYN,GAC5CzB,EAAS,GAAG+B,oBAAoB,OAAQ7B,KAlB5C,OACE8B,SAAU,IACVC,OAAO,EACPnC,KAAAA,GAmEJ,QAASsB,GAAcF,GAErB,MAAO,IAAI7B,MAAKO,GAAG,SAACsC,EAAMC,GAExB,GAAIjB,YAAgBkB,OAAQlB,YAAgBmB,MAAM,CAChD,GAAIC,GAAS,GAAIC,WACjBD,GAAOE,UAAY,SAACC,GAAD,MAAeP,GAAKO,EAAUC,OAAOC,SACxDL,EAAOlB,cAAcF,OAGrBiB,GAAO,GAAIS,OAAJ,yEAAmF1B,MA5E9F,GAAI2B,GAAYtD,EAAuBD,GAbrCwD,EAAMD,EAAAA,WAAQE,OAAO,wBAEzBD,GAAInD,UAAU,aACZ,KACA,SACAA","file":"index.js","sourcesContent":["import angular from 'angular'\n\nlet app = angular.module('angular-files-drop', [])\n\napp.directive('filesDrop', [\n  '$q',\n  '$parse',\n  directive\n])\n\nfunction directive($q, $parse) {\n  return {\n    restrict: 'A',\n    scope: false,\n    link,\n  }\n\n  function link($scope, $element, $attrs) {\n\n    if ($attrs.filesRead!='false') readAsDataURL = readAsDataURL.bind({$q})\n\n    $element.addClass('filesDrop')\n    $element[0].addEventListener('dragleave', fileDragleave)\n    $element[0].addEventListener('dragover', fileDragover)\n    $element[0].addEventListener('drop', fileDrop)\n\n    $scope.$on('$destroy', () => {\n      $element[0].removeEventListener('dragleave', fileDragleave)\n      $element[0].removeEventListener('dragover', fileDragover)\n      $element[0].removeEventListener('drop', fileDrop)\n    })\n\n    function fileDrop(event) {\n      event.stopPropagation()\n      event.preventDefault()\n\n      let dt = event.dataTransfer\n      let files = dt && dt.files || null\n\n      if (!files) {\n        $parse($attrs.filesDrop)($scope, {\n          $files: [],\n          $event: event,\n        })\n\n        fileDragleave(event)\n\n        return\n      }\n\n      let promises=[];\n      if ($attrs.filesRead!='false') {\n        promises=promises.reduce.call(files, (prev, file) => {\n          let promise = readAsDataURL(file).then((dataURL) => file.dataURL = dataURL)\n          prev.push(promise)\n          return prev\n        }, [])\n      }\n      $q.all(promises).then(() => {\n\n        $parse($attrs.filesDrop)($scope, {\n          $files: files,\n          $event: event,\n        })\n\n        fileDragleave(event)\n      })\n    }\n\n    function fileDragover(event) {\n      event.stopPropagation()\n      event.preventDefault()\n      $element.addClass('filesDrop--dragover')\n    }\n\n    function fileDragleave() {\n      $element.removeClass('filesDrop--dragover')\n    }\n  }\n}\n\nfunction readAsDataURL(file) {\n\n  return new this.$q((done, reject) => {\n\n    if (file instanceof File || file instanceof Blob) {\n      var reader = new FileReader()\n      reader.onloadend = (loadEvent) => done(loadEvent.target.result)\n      reader.readAsDataURL(file)\n    }\n    else {\n      reject(new Error(`Expected image.readAsDataURL(arg1): arg1 to be File instance, but got ${file}`))\n    }\n  })\n}\n"]}